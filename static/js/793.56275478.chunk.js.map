{"version":3,"file":"static/js/793.56275478.chunk.js","mappings":"8PACA,EAA0B,mCAA1B,EAAsE,kCAAtE,EAA+G,gCAA/G,EAAwJ,kCAAxJ,EAAkM,iCAAlM,EAA0O,gCAA1O,EAAqR,oCAArR,EAAoU,oCAApU,EAA+W,gC,SCqE/W,EAjEwB,WAAO,IAAD,EAC5B,GAA0BA,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KAEQC,GAAOC,EAAAA,EAAAA,MAAPD,GAEFE,GAAO,WADIC,EAAAA,EAAAA,MACKC,aAAT,eAAgBF,OAAQ,IAE/BG,GAAWC,EAAAA,EAAAA,OAGjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,gIAEQC,EAAAA,EAAAA,IAAcT,GAFtB,gBAEPU,EAFO,EAEPA,KAEAC,EAAuED,EAAvEC,YAAaC,EAA0DF,EAA1DE,MAAOC,EAAmDH,EAAnDG,eAAgBC,EAAmCJ,EAAnCI,aAAcC,EAAqBL,EAArBK,SAAUC,EAAWN,EAAXM,OAE9DC,GAA4B,GAAfH,GAAmBI,QAAQ,GACxCC,EAAaH,EAAOI,KAAI,SAAAC,GAAI,OAAIA,EAAKC,IAAT,IAAeC,KAA9B,MAEnBxB,EAAS,CAAEY,YAAAA,EAAaC,MAAAA,EAAOC,eAAAA,EAAgBI,UAAAA,EAAWF,SAAAA,EAAUI,WAAAA,IATrD,kDAWfK,QAAQC,IAAR,MAXe,0DAAH,qDAehBjB,GACD,GAAE,CAACR,IAEJ,IAAQW,EAAwEb,EAAxEa,YAAaC,EAA2Dd,EAA3Dc,MAAOC,EAAoDf,EAApDe,eAAgBI,EAAoCnB,EAApCmB,UAAWF,EAAyBjB,EAAzBiB,SAAUI,EAAerB,EAAfqB,WAEjE,OACE,iBAAKO,UAAWC,EAAhB,WACE,iBAAKD,UAAWC,EAAhB,WACE,0BACE,gBAAKC,IAAG,yCAAoCjB,GAAekB,IAAKjB,EAAOkB,MAAM,WAG/E,iBAAKJ,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,SAA2Bd,KAC3B,eAAGa,UAAWC,EAAd,yBAAqCV,EAArC,SACA,eAAIS,UAAWC,EAAf,wBACA,cAAGD,UAAWC,EAAd,SAAyBZ,KACzB,eAAIW,UAAWC,EAAf,sBACA,cAAGD,UAAWC,EAAd,SAAyBR,KACzB,mBAAQO,UAAWC,EAAYI,QArCrB,kBAAM1B,EAASH,EAAf,EAqCV,4BAMJ,iBAAKwB,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,qCACA,SAAC,KAAD,CAAMK,GAAI,OAAQ5B,MAAO,CAAEF,KAAAA,GAAQwB,UAAWC,EAA9C,mBAGA,SAAC,KAAD,CAAMK,GAAI,UAAW5B,MAAO,CAAEF,KAAAA,GAAQwB,UAAWC,EAAjD,yBAIF,SAAC,KAAD,MAGL,C,2JClEKM,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDC,EAAmB,WAC9B,OAAON,EAASO,IAAI,sBACrB,EAEY/B,EAAgB,SAAAT,GAC3B,OAAOiC,EAASO,IAAT,iBAAuBxC,GAC/B,EAEYyC,EAAkB,SAACC,GAAsB,IAAdC,EAAa,uDAAN,EAC7C,OAAOV,EAASO,IAAT,8BAAoCE,GAAU,CACnDN,OAAQ,CACNM,OAAAA,EACAC,KAAAA,IAGL,EAEYC,EAAc,SAAA5C,GAAE,OAAIiC,EAASO,IAAT,iBAAuBxC,EAAvB,YAAJ,EAEhB6C,EAAiB,SAAA7C,GAAE,OAAIiC,EAASO,IAAT,iBAAuBxC,EAAvB,YAAJ,C","sources":["webpack://react-homework-template/./src/pages/SingleMoviePage/single-movie-page.module.scss?0eaa","pages/SingleMoviePage/SingleMoviePage.jsx","shared/api/popularMovies.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"single-movie-page_wrapper__GP2EC\",\"poster\":\"single-movie-page_poster__GKtZl\",\"info\":\"single-movie-page_info__okBmX\",\"button\":\"single-movie-page_button__hlLR2\",\"title\":\"single-movie-page_title__GgiOx\",\"text\":\"single-movie-page_text__rVUpP\",\"subtitle\":\"single-movie-page_subtitle__M8lxb\",\"moreinfo\":\"single-movie-page_moreinfo__R1EFe\",\"link\":\"single-movie-page_link__IlyEc\"};","import { useState, useEffect } from 'react';\nimport { Outlet, Link, useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { getMoviesById } from '../../shared/api/popularMovies';\nimport css from './single-movie-page.module.scss';\n\nconst SingleMoviePage = () => {\n  const [movie, setMovie] = useState({});\n\n  const { id } = useParams();\n  const location = useLocation();\n  const from = location.state?.from || '/';\n\n  const navigate = useNavigate();\n  const goBackBtn = () => navigate(from);\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        const { data } = await getMoviesById(id);\n\n        const { poster_path, title, original_title, vote_average, overview, genres } = data;\n\n        const userScore = (vote_average * 10).toFixed(2);\n        const genresInfo = genres.map(item => item.name).join(`, `);\n\n        setMovie({ poster_path, title, original_title, userScore, overview, genresInfo });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchMovie();\n  }, [id]);\n\n  const { poster_path, title, original_title, userScore, overview, genresInfo } = movie;\n\n  return (\n    <div className={css.wrapper}>\n      <div className={css.poster}>\n        <div>\n          <img src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={title} width=\"300\" />\n        </div>\n\n        <div className={css.info}>\n          <h2 className={css.title}>{original_title}</h2>\n          <p className={css.text}>User Score: {userScore} %</p>\n          <h3 className={css.subtitle}>Overview:</h3>\n          <p className={css.text}>{overview}</p>\n          <h3 className={css.subtitle}>Genres:</h3>\n          <p className={css.text}>{genresInfo}</p>\n          <button className={css.button} onClick={goBackBtn}>\n            GO BACK\n          </button>\n        </div>\n      </div>\n\n      <div className={css.moreinfo}>\n        <h3 className={css.subtitle}>Additional information</h3>\n        <Link to={'cast'} state={{ from }} className={css.link}>\n          cast\n        </Link>\n        <Link to={'reviews'} state={{ from }} className={css.link}>\n          reviews\n        </Link>\n      </div>\n      <Outlet />\n    </div>\n  );\n};\n\nexport default SingleMoviePage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '77da55832de63d39c695f15c5d27b3f3',\n    language: 'en-US',\n  },\n});\n\nexport const getPopularMovies = () => {\n  return instance.get('/trending/movie/day');\n};\n\nexport const getMoviesById = id => {\n  return instance.get(`/movie/${id}`);\n};\n\nexport const getSearchMovies = (search, page = 1) => {\n  return instance.get(`/search/movie?query=${search}`, {\n    params: {\n      search,\n      page,\n    },\n  });\n};\n\nexport const getCastById = id => instance.get(`/movie/${id}/credits`);\n\nexport const getReviewsById = id => instance.get(`/movie/${id}/reviews`);\n"],"names":["useState","movie","setMovie","id","useParams","from","useLocation","state","navigate","useNavigate","useEffect","fetchMovie","getMoviesById","data","poster_path","title","original_title","vote_average","overview","genres","userScore","toFixed","genresInfo","map","item","name","join","console","log","className","css","src","alt","width","onClick","to","instance","axios","baseURL","params","api_key","language","getPopularMovies","get","getSearchMovies","search","page","getCastById","getReviewsById"],"sourceRoot":""}